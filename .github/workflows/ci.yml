#
# Copyright 2015-2020 Benjamin Worpitz
#
# This file is part of alpaka.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

name: Continuous Integration

on: [push, pull_request]

################################################################################
# NOTE: Testing the full matrix is not practical.
# Therefore we aim to have each value been set in at lest one job.
# CXX                                           : {g++, clang++}
#   [g++] ALPAKA_CI_GCC_VER                     : {5, 6, 7, 8, 9, 10}
#   [clang++] ALPAKA_CI_CLANG_VER               : {4.0, 5.0, 6.0, 7, 8, 9, 10}
#   [cl.exe] ALPAKA_CI_CL_VER                   : {2017, 2019}
#   ALPAKA_CI_STDLIB                            : {libstdc++, [CXX==clang++]:libc++}
# CMAKE_BUILD_TYPE                              : {Debug, Release}
# ALPAKA_CI                                     : {GITHUB}
# ALPAKA_CI_DOCKER_BASE_IMAGE_NAME              : {ubuntu:16.04, ubuntu:18.04, ubuntu:20.04}
# ALPAKA_CI_BOOST_BRANCH                        : {boost-1.65.1, boost-1.66.0, boost-1.67.0, boost-1.68.0, boost-1.69.0, boost-1.70.0, boost-1.71.0, boost-1.72.0, boost-1.73.0, boost-1.74.0}
# ALPAKA_CI_CMAKE_VER                           : {3.15.7, 3.16.9, 3.17.5, 3.18.5, 3.19.0}
# ALPAKA_CI_SANITIZERS                          : {ASan, UBsan, TSan}
#    TSan is not currently used because it produces many unexpected errors
# ALPAKA_CI_ANALYSIS                            : {ON, OFF}
# ALPAKA_DEBUG                                  : {0, 1, 2}
# ALPAKA_ACC_GPU_CUDA_ONLY_MODE                 : {ON, OFF}
# ALPAKA_ACC_GPU_HIP_ONLY_MODE                  : {ON, OFF}
# ALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE             : {ON, OFF}
# ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE         : {ON, OFF}
# ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE          : {ON, OFF}
# ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE            : {ON, OFF}
#   [ON] OMP_NUM_THREADS                        : {1, 2, 3, 4}
# ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE            : {ON, OFF}
#   [ON] OMP_NUM_THREADS                        : {1, 2, 3, 4}
# ALPAKA_ACC_ANY_BT_OMP5_ENABLE                 : {ON, OFF}
#   [ON] OMP_NUM_THREADS                        : {1, 2, 3, 4}
# ALPAKA_ACC_GPU_CUDA_ENABLE                    : {ON, OFF}
#   [ON] ALPAKA_CUDA_VERSION                    : {9.0, 9.1, 9.2, 10.0, 10.1, 10.2, 11.0}
#   [ON] ALPAKA_CUDA_COMPILER                   : {nvcc, [CXX==clang++]:clang}
# ALPAKA_ACC_CPU_B_TBB_T_SEQ_ENABLE             : {ON, OFF}
# ALPAKA_ACC_GPU_HIP_ENABLE                     : {ON, OFF}
#   [ON] ALPAKA_CI_HIP_BRANCH                   : {rocm-4.0.1}
#   [ON] ALPAKA_HIP_PLATFORM                    : {clang}

env:
  ALPAKA_CI: GITHUB
  TBB_ROOT: tbb
  BOOST_ROOT: ${{ github.workspace }}/boost
  ALPAKA_CI_BOOST_LIB_DIR: ${{ github.workspace }}/boost_libs
  ALPAKA_CI_CMAKE_DIR: ${{ github.workspace }}/CMake
  ALPAKA_CI_CUDA_DIR: ${{ github.workspace }}/CUDA
  ALPAKA_CI_HIP_ROOT_DIR: ${{ github.workspace }}/hip
  ALPAKA_CI_SANITIZERS:
  ALPAKA_CI_ANALYSIS: OFF
  ALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE: ON
  ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE: ON
  ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE: ON
  ALPAKA_ACC_CPU_B_TBB_T_SEQ_ENABLE: ON
  ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE: ON
  ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE: ON
  ALPAKA_ACC_ANY_BT_OMP5_ENABLE: OFF
  ALPAKA_ACC_ANY_BT_OACC_ENABLE: OFF
  ALPAKA_ACC_GPU_CUDA_ENABLE: OFF
  ALPAKA_ACC_GPU_CUDA_ONLY_MODE: OFF
  ALPAKA_ACC_GPU_HIP_ENABLE: OFF
  ALPAKA_ACC_GPU_HIP_ONLY_MODE: OFF

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.11
      with:
        clangFormatVersion: 11
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env: ${{ matrix.env }}

    strategy:
      fail-fast: false
      matrix:
        include:
        ### Ubuntu
        ## native
        # g++
        # We can not enable UBSan when using gcc because it does not have a -fsanitize-blacklist option to suppress errors in boost etc.
        # gcc 6 ASan is triggered within libtbb.so
        # gcc 7 ASan introduced 'stack-use-after-scope' which is triggered by GOMP_parallel
        - name: linux_gcc-5_release
          os: ubuntu-18.04
          env: {CXX: g++,     CC: gcc,    ALPAKA_CI_GCC_VER: 5,        ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Release, ALPAKA_CI_BOOST_BRANCH: boost-1.66.0, ALPAKA_CI_CMAKE_VER: 3.15.7, OMP_NUM_THREADS: 3, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:18.04", ALPAKA_CI_SANITIZERS: ASan}
        - name: linux_gcc-6_debug_c++17
          os: ubuntu-18.04
          env: {CXX: g++,     CC: gcc,    ALPAKA_CI_GCC_VER: 6,        ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Debug,   ALPAKA_CI_BOOST_BRANCH: boost-1.70.0, ALPAKA_CI_CMAKE_VER: 3.16.5, OMP_NUM_THREADS: 2, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:18.04", ALPAKA_CI_SANITIZERS: ASan, ALPAKA_CXX_STANDARD: 17, CMAKE_CXX_EXTENSIONS: OFF}
        - name: linux_gcc-7_release
          os: ubuntu-latest
          env: {CXX: g++,     CC: gcc,    ALPAKA_CI_GCC_VER: 7,        ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Release, ALPAKA_CI_BOOST_BRANCH: boost-1.65.1, ALPAKA_CI_CMAKE_VER: 3.17.5, OMP_NUM_THREADS: 1, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:20.04", ALPAKA_CI_SANITIZERS: ASan}
        - name: linux_gcc-8_debug
          os: ubuntu-latest
          env: {CXX: g++,     CC: gcc,    ALPAKA_CI_GCC_VER: 8,        ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Debug,   ALPAKA_CI_BOOST_BRANCH: boost-1.72.0, ALPAKA_CI_CMAKE_VER: 3.18.5, OMP_NUM_THREADS: 4, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:16.04", ALPAKA_CI_SANITIZERS: ASan, CMAKE_CXX_EXTENSIONS: OFF}
        - name: linux_gcc-9_debug_c++17
          os: ubuntu-latest
          env: {CXX: g++,     CC: gcc,    ALPAKA_CI_GCC_VER: 9,        ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Debug,   ALPAKA_CI_BOOST_BRANCH: boost-1.68.0, ALPAKA_CI_CMAKE_VER: 3.15.7, OMP_NUM_THREADS: 3, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:20.04", ALPAKA_CI_SANITIZERS: ASan, ALPAKA_CXX_STANDARD: 17}
        - name: linux_gcc-10_release
          os: ubuntu-latest
          env: {CXX: g++,     CC: gcc,    ALPAKA_CI_GCC_VER: 10,       ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Release, ALPAKA_CI_BOOST_BRANCH: boost-1.74.0, ALPAKA_CI_CMAKE_VER: 3.19.0, OMP_NUM_THREADS: 2, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:20.04", ALPAKA_CI_SANITIZERS: ASan}
        - name: linux_gcc-10_release_oacc
          os: ubuntu-latest
          env: {CXX: g++,     CC: gcc,    ALPAKA_CI_GCC_VER: 10,       ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Release, ALPAKA_CI_BOOST_BRANCH: boost-1.74.0, ALPAKA_CI_CMAKE_VER: 3.17.5, OMP_NUM_THREADS: 2, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:20.04", ALPAKA_CI_SANITIZERS: ASan, CMAKE_CXX_FLAGS: "-foffload=disable", ALPAKA_ACC_ANY_BT_OACC_ENABLE: ON, ALPAKA_OFFLOAD_MAX_BLOCK_SIZE: 1, ACC_DEVICE_TYPE: "host", ALPAKA_ACC_CPU_B_SEQ_T_THREADS_ENABLE: OFF, ALPAKA_ACC_CPU_B_SEQ_T_FIBERS_ENABLE: OFF, ALPAKA_ACC_CPU_B_TBB_T_SEQ_ENABLE: OFF, ALPAKA_ACC_CPU_B_OMP2_T_SEQ_ENABLE: OFF, ALPAKA_ACC_CPU_B_SEQ_T_OMP2_ENABLE: OFF}

        # clang++
        - name: linux_clang-4_debug_ubsan
          os: ubuntu-latest
          env: {CXX: clang++, CC: clang,  ALPAKA_CI_CLANG_VER: "4.0",  ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Debug,   ALPAKA_CI_BOOST_BRANCH: boost-1.69.0, ALPAKA_CI_CMAKE_VER: 3.19.0, OMP_NUM_THREADS: 4, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:16.04", ALPAKA_CI_SANITIZERS: UBSan}
        - name: linux_clang-5_debug_c++17
          os: ubuntu-latest
          env: {CXX: clang++, CC: clang,  ALPAKA_CI_CLANG_VER: "5.0",  ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Debug,   ALPAKA_CI_BOOST_BRANCH: boost-1.68.0, ALPAKA_CI_CMAKE_VER: 3.15.7, OMP_NUM_THREADS: 3, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:18.04", ALPAKA_CI_SANITIZERS: ASan, ALPAKA_CXX_STANDARD: 17}
        - name: linux_clang-6_release_asan_c++17
          os: ubuntu-latest
          env: {CXX: clang++, CC: clang,  ALPAKA_CI_CLANG_VER: "6.0",  ALPAKA_CI_STDLIB: libc++,    CMAKE_BUILD_TYPE: Release, ALPAKA_CI_BOOST_BRANCH: boost-1.65.1, ALPAKA_CI_CMAKE_VER: 3.17.5, OMP_NUM_THREADS: 2, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:18.04", ALPAKA_CI_SANITIZERS: ASan, ALPAKA_CXX_STANDARD: 17}
        - name: linux_clang-7_release_c++17
          os: ubuntu-latest
          env: {CXX: clang++, CC: clang,  ALPAKA_CI_CLANG_VER: 7,      ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Release, ALPAKA_CI_BOOST_BRANCH: boost-1.67.0, ALPAKA_CI_CMAKE_VER: 3.16.5, OMP_NUM_THREADS: 1, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:20.04", ALPAKA_CI_SANITIZERS: ASan, ALPAKA_CXX_STANDARD: 17, CMAKE_CXX_EXTENSIONS: OFF}
        - name: linux_clang-8_release
          os: ubuntu-latest
          env: {CXX: clang++, CC: clang,  ALPAKA_CI_CLANG_VER: 8,      ALPAKA_CI_STDLIB: libc++,    CMAKE_BUILD_TYPE: Release, ALPAKA_CI_BOOST_BRANCH: boost-1.74.0, ALPAKA_CI_CMAKE_VER: 3.18.5, OMP_NUM_THREADS: 4, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:18.04", ALPAKA_CI_SANITIZERS: ASan, CMAKE_CXX_EXTENSIONS: OFF}
        - name: linux_clang-9_debug
          os: ubuntu-latest
          env: {CXX: clang++, CC: clang,  ALPAKA_CI_CLANG_VER: 9,      ALPAKA_CI_STDLIB: libstdc++, CMAKE_BUILD_TYPE: Debug,   ALPAKA_CI_BOOST_BRANCH: boost-1.71.0, ALPAKA_CI_CMAKE_VER: 3.16.5, OMP_NUM_THREADS: 1, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:18.04", ALPAKA_CI_SANITIZERS: ASan}
        - name: linux_clang-10_release_omp5
          os: ubuntu-latest
          env: {CXX: clang++, CC: clang,  ALPAKA_CI_CLANG_VER: 10,     ALPAKA_CI_STDLIB: libc++,    CMAKE_BUILD_TYPE: Release, ALPAKA_CI_BOOST_BRANCH: boost-1.73.0, ALPAKA_CI_CMAKE_VER: 3.15.7, OMP_NUM_THREADS: 4, ALPAKA_CI_DOCKER_BASE_IMAGE_NAME: "ubuntu:20.04", ALPAKA_CI_SANITIZERS: ASan, CMAKE_CXX_FLAGS: "-fopenmp=libomp -fopenmp-targets=x86_64-pc-linux-gnu -Wno-openmp-mapping", ALPAKA_ACC_ANY_BT_OMP5_ENABLE: ON, ALPAKA_OFFLOAD_MAX_BLOCK_SIZE: 1, CMAKE_EXE_LINKER_FLAGS: "-fopenmp"}

    steps:
    - name: check filter
      if: (contains(github.event.head_commit.message, 'ci_filter') && !contains(github.event.head_commit.message, matrix.name ))
      run: exit 1
    - uses: actions/checkout@v1
    - name: build + test
      if: (runner.os == 'Windows')
      env:
        ALPAKA_CI_OS_NAME: ${{runner.os}}
      shell: bash
      run: cd ${GITHUB_WORKSPACE} && ./script/ci.sh
    - name: build + test
      if: (runner.os == 'Linux' || runner.os == 'macOS')
      env:
        ALPAKA_CI_OS_NAME: ${{runner.os}}
      run: cd ${GITHUB_WORKSPACE} && ./script/ci.sh
