/**
 * \file
 * Copyright 2014-2015 Benjamin Worpitz
 *
 * This file is part of alpaka.
 *
 * alpaka is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * alpaka is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with alpaka.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <alpaka/core/Common.hpp>                   // ALPAKA_FCT_HOST

// cuda_runtime_api.h: CUDA Runtime API C-style interface that does not require compiling with nvcc.
// cuda_runtime.h: CUDA Runtime API  C++-style interface built on top of the C API.
//  It wraps some of the C API routines, using overloading, references and default arguments.
//  These wrappers can be used from C++ code and can be compiled with any C++ compiler.
//  The C++ API also has some CUDA-specific wrappers that wrap C API routines that deal with symbols, textures, and device functions.
//  These wrappers require the use of \p nvcc because they depend on code being generated by the compiler.
//  For example, the execution configuration syntax to invoke kernels is only available in source code compiled with nvcc.
// cuda.h: CUDA Driver API
#include <cuda_runtime.h>

#include <array>                                    // std::array
#include <type_traits>                              // std::enable_if
#include <utility>                                  // std::forward
#include <iostream>                                 // std::cerr
#include <string>                                   // std::string, std::to_string
#include <stdexcept>                                // std::runtime_error
#include <cstddef>                                  // std::size_t

#if (!defined(CUDART_VERSION) || (CUDART_VERSION < 7000))
    #error "CUDA version 7.0 or greater required!"
#endif

namespace alpaka
{
    namespace detail
    {
        //-----------------------------------------------------------------------------
        //! Applies the trait to all types and combines the result with &&.
        //! Multiple argument version.
        //-----------------------------------------------------------------------------
        template<
            template<typename, typename...> class TTrait,
            typename THead,
            typename... TTail>
        struct ApplyAllCombineAndInternal
        {
            enum
            {
                value = TTrait<THead>::value
                    && ApplyAllCombineAndInternal<TTrait, TTail...>::value
            };
        };
        //-----------------------------------------------------------------------------
        //! Applies the trait to all types and combines the result with &&.
        //! Single argument version.
        //-----------------------------------------------------------------------------
        template<
            template<typename, typename...> class TTrait,
            typename THead>
        struct ApplyAllCombineAndInternal<
            TTrait,
            THead>
        {
            enum
            {
                value = TTrait<THead>::value
            };
        };
        //-----------------------------------------------------------------------------
        //! Applies the trait to all types and combines the result with &&.
        //-----------------------------------------------------------------------------
        template<
            template<typename, typename...> class TTrait,
            typename... TApplicants>
        struct ApplyAllCombineAnd
        {
            enum
            {
                value = ApplyAllCombineAndInternal<
                    TTrait,
                    TApplicants...>::value
            };
        };
        //-----------------------------------------------------------------------------
        //! Applies the trait to all types and combines the result with &&.
        //! Zero argument version always returns true.
        //-----------------------------------------------------------------------------
        template<
            template<typename, typename...> class TTrait>
        struct ApplyAllCombineAnd<
            TTrait>
        {
            enum
            {
                value = true
            };
        };
    }
    namespace accs
    {
        namespace cuda
        {
            namespace detail
            {
                template <typename T>
                using IsConvertibleCudaError = std::is_convertible<T, cudaError_t>;

                //-----------------------------------------------------------------------------
                //! CUDA runtime error checking with log and exception, ignoring specific error values
                //-----------------------------------------------------------------------------
                template<
                    typename... TErrors,
                    typename = typename std::enable_if<alpaka::detail::ApplyAllCombineAnd<IsConvertibleCudaError, TErrors...>::value>::type>
                ALPAKA_FCT_HOST auto cudaRtCheckIgnore(
                    cudaError_t const & error,
                    char const * cmd,
                    char const * file,
                    int const & line,
                    TErrors && ... ignoredErrorCodes)
                -> void
                {
                    // Even if we get the error directly from the command, we have to reset the global error state by getting it.
                    cudaGetLastError();
                    if(error != cudaSuccess)
                    {
                        // If the error code is not one of the ignored ones.
                        std::array<cudaError_t, sizeof...(ignoredErrorCodes)> const aIgnoredErrorCodes{std::forward<TErrors>(ignoredErrorCodes)...};
                        if(std::find(aIgnoredErrorCodes.cbegin(), aIgnoredErrorCodes.cend(), error) == aIgnoredErrorCodes.cend())
                        {
                            std::string const sError(std::string(file) + "(" + std::to_string(line) + ") '" + std::string(cmd) + "' returned error: '" + std::string(cudaGetErrorString(error)) + "' (possibly from a previous CUDA call)!");
                            std::cerr << sError << std::endl;
                            ALPAKA_DEBUG_BREAK;
                            throw std::runtime_error(sError);
                        }
                    }
                }
            }
        }
    }
}

#if BOOST_COMP_MSVC
    //-----------------------------------------------------------------------------
    //! CUDA runtime error checking with log and exception, ignoring specific error values
    //-----------------------------------------------------------------------------
    #define ALPAKA_CUDA_RT_CHECK_IGNORE(cmd, ...)\
        ::alpaka::accs::cuda::detail::cudaRtCheckIgnore(cmd, #cmd, __FILE__, __LINE__, __VA_ARGS__)
#else
    //-----------------------------------------------------------------------------
    //! CUDA runtime error checking with log and exception, ignoring specific error values
    //-----------------------------------------------------------------------------
    #define ALPAKA_CUDA_RT_CHECK_IGNORE(cmd, ...)\
        ::alpaka::accs::cuda::detail::cudaRtCheckIgnore(cmd, #cmd, __FILE__, __LINE__, ##__VA_ARGS__)
#endif

//-----------------------------------------------------------------------------
//! CUDA runtime error checking with log and exception.
//-----------------------------------------------------------------------------
#define ALPAKA_CUDA_RT_CHECK(cmd)\
    ALPAKA_CUDA_RT_CHECK_IGNORE(cmd)

